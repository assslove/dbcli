// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: limit.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "limit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace db_proto {

namespace {

const ::google::protobuf::Descriptor* MLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MLimitlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MLimitlist_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_limit_2eproto() {
  protobuf_AddDesc_limit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "limit.proto");
  GOOGLE_CHECK(file != NULL);
  MLimit_descriptor_ = file->message_type(0);
  static const int MLimit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimit, value_),
  };
  MLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MLimit_descriptor_,
      MLimit::default_instance_,
      MLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MLimit));
  MLimitlist_descriptor_ = file->message_type(1);
  static const int MLimitlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimitlist, limit_),
  };
  MLimitlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MLimitlist_descriptor_,
      MLimitlist::default_instance_,
      MLimitlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimitlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MLimitlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MLimitlist));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_limit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MLimit_descriptor_, &MLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MLimitlist_descriptor_, &MLimitlist::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_limit_2eproto() {
  delete MLimit::default_instance_;
  delete MLimit_reflection_;
  delete MLimitlist::default_instance_;
  delete MLimitlist_reflection_;
}

void protobuf_AddDesc_limit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013limit.proto\022\010db_proto\"%\n\006MLimit\022\014\n\004typ"
    "e\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"-\n\nMLimitlist\022\037\n\005"
    "limit\030\001 \003(\0132\020.db_proto.MLimit", 109);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "limit.proto", &protobuf_RegisterTypes);
  MLimit::default_instance_ = new MLimit();
  MLimitlist::default_instance_ = new MLimitlist();
  MLimit::default_instance_->InitAsDefaultInstance();
  MLimitlist::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_limit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_limit_2eproto {
  StaticDescriptorInitializer_limit_2eproto() {
    protobuf_AddDesc_limit_2eproto();
  }
} static_descriptor_initializer_limit_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MLimit::kTypeFieldNumber;
const int MLimit::kValueFieldNumber;
#endif  // !_MSC_VER

MLimit::MLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_proto.MLimit)
}

void MLimit::InitAsDefaultInstance() {
}

MLimit::MLimit(const MLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_proto.MLimit)
}

void MLimit::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MLimit::~MLimit() {
  // @@protoc_insertion_point(destructor:db_proto.MLimit)
  SharedDtor();
}

void MLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MLimit_descriptor_;
}

const MLimit& MLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_limit_2eproto();
  return *default_instance_;
}

MLimit* MLimit::default_instance_ = NULL;

MLimit* MLimit::New() const {
  return new MLimit;
}

void MLimit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MLimit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_proto.MLimit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_proto.MLimit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_proto.MLimit)
  return false;
#undef DO_
}

void MLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_proto.MLimit)
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_proto.MLimit)
}

::google::protobuf::uint8* MLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_proto.MLimit)
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_proto.MLimit)
  return target;
}

int MLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MLimit::MergeFrom(const MLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLimit::CopyFrom(const MLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MLimit::Swap(MLimit* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MLimit_descriptor_;
  metadata.reflection = MLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MLimitlist::kLimitFieldNumber;
#endif  // !_MSC_VER

MLimitlist::MLimitlist()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:db_proto.MLimitlist)
}

void MLimitlist::InitAsDefaultInstance() {
}

MLimitlist::MLimitlist(const MLimitlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:db_proto.MLimitlist)
}

void MLimitlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MLimitlist::~MLimitlist() {
  // @@protoc_insertion_point(destructor:db_proto.MLimitlist)
  SharedDtor();
}

void MLimitlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MLimitlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MLimitlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MLimitlist_descriptor_;
}

const MLimitlist& MLimitlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_limit_2eproto();
  return *default_instance_;
}

MLimitlist* MLimitlist::default_instance_ = NULL;

MLimitlist* MLimitlist::New() const {
  return new MLimitlist;
}

void MLimitlist::Clear() {
  limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MLimitlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:db_proto.MLimitlist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .db_proto.MLimit limit = 1;
      case 1: {
        if (tag == 10) {
         parse_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_limit;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:db_proto.MLimitlist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:db_proto.MLimitlist)
  return false;
#undef DO_
}

void MLimitlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:db_proto.MLimitlist)
  // repeated .db_proto.MLimit limit = 1;
  for (int i = 0; i < this->limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->limit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:db_proto.MLimitlist)
}

::google::protobuf::uint8* MLimitlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:db_proto.MLimitlist)
  // repeated .db_proto.MLimit limit = 1;
  for (int i = 0; i < this->limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->limit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:db_proto.MLimitlist)
  return target;
}

int MLimitlist::ByteSize() const {
  int total_size = 0;

  // repeated .db_proto.MLimit limit = 1;
  total_size += 1 * this->limit_size();
  for (int i = 0; i < this->limit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MLimitlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MLimitlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MLimitlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MLimitlist::MergeFrom(const MLimitlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  limit_.MergeFrom(from.limit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MLimitlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLimitlist::CopyFrom(const MLimitlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLimitlist::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->limit())) return false;
  return true;
}

void MLimitlist::Swap(MLimitlist* other) {
  if (other != this) {
    limit_.Swap(&other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MLimitlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MLimitlist_descriptor_;
  metadata.reflection = MLimitlist_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace db_proto

// @@protoc_insertion_point(global_scope)
